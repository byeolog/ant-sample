{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","Header","Layout","Content","Sider","headerMenu","key","title","sidebarMenu_Calendar","subMenu","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","Breadcrumb1","Breadcrumb2","Breadcrumb3","sidebarMenu","_renderHeaderMenu","map","menu","react_default","a","createElement","es_menu","Item","inherits","createClass","value","layout","className","theme","mode","defaultSelectedKeys","style","lineHeight","width","background","defaultOpenKeys","height","borderRight","icon","type","padding","breadcrumb","margin","minHeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.195314ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { Layout, Menu, Breadcrumb, Icon } from \"antd\";\n\nconst { SubMenu } = Menu;\nconst { Header, Content, Sider } = Layout;\n\nconst headerMenu = [\n  { key: 1, title: \"calendar\" },\n  { key: 2, title: \"grid\" },\n  { key: 3, title: \"dashboard\" }\n];\n\nconst sidebarMenu_Calendar = [\n  {\n    title: \"calendar1\",\n    subMenu: [{ title: \"subCalendar1\" }, { title: \"subCalendar2\" }]\n  },\n  {\n    title: \"calendar2\",\n    subMenu: [\n      { title: \"subCalendar1\" },\n      { title: \"subCalendar2\" },\n      { title: \"subCalendar3\" }\n    ]\n  }\n];\n\nexport class App extends Component {\n  state = {\n    Breadcrumb1: \"calendar\",\n    Breadcrumb2: \"calendar1\",\n    Breadcrumb3: \"subCalendar1\",\n    headerMenu: headerMenu,\n    sidebarMenu: sidebarMenu_Calendar\n  };\n\n  _renderHeaderMenu = () => {\n    const menu = this.state.headerMenu.map(menu => {\n      return <Menu.Item key={menu.key}>{menu.title}</Menu.Item>;\n    });\n    return menu;\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Header className=\"header\">\n          <div className=\"logo\" />\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            defaultSelectedKeys={[\"2\"]}\n            style={{ lineHeight: \"64px\" }}\n          >\n            {this._renderHeaderMenu()}\n            {/* <Menu.Item key=\"1\">nav 1</Menu.Item>\n            <Menu.Item key=\"2\">nav 2</Menu.Item>\n            <Menu.Item key=\"3\">nav 3</Menu.Item> */}\n          </Menu>\n        </Header>\n        <Layout>\n          <Sider width={200} style={{ background: \"#fff\" }}>\n            <Menu\n              mode=\"inline\"\n              defaultSelectedKeys={[\"1\"]}\n              defaultOpenKeys={[\"sub1\"]}\n              style={{ height: \"100%\", borderRight: 0 }}\n            >\n              <SubMenu\n                key=\"sub1\"\n                title={\n                  <span>\n                    <Icon type=\"user\" />\n                    subnav 1\n                  </span>\n                }\n              >\n                <Menu.Item key=\"1\">option1</Menu.Item>\n                <Menu.Item key=\"2\">option2</Menu.Item>\n                <Menu.Item key=\"3\">option3</Menu.Item>\n                <Menu.Item key=\"4\">option4</Menu.Item>\n              </SubMenu>\n              <SubMenu\n                key=\"sub2\"\n                title={\n                  <span>\n                    <Icon type=\"laptop\" />\n                    subnav 2\n                  </span>\n                }\n              >\n                <Menu.Item key=\"5\">option5</Menu.Item>\n                <Menu.Item key=\"6\">option6</Menu.Item>\n                <Menu.Item key=\"7\">option7</Menu.Item>\n                <Menu.Item key=\"8\">option8</Menu.Item>\n              </SubMenu>\n              <SubMenu\n                key=\"sub3\"\n                title={\n                  <span>\n                    <Icon type=\"notification\" />\n                    subnav 3\n                  </span>\n                }\n              >\n                <Menu.Item key=\"9\">option9</Menu.Item>\n                <Menu.Item key=\"10\">option10</Menu.Item>\n                <Menu.Item key=\"11\">option11</Menu.Item>\n                <Menu.Item key=\"12\">option12</Menu.Item>\n              </SubMenu>\n            </Menu>\n          </Sider>\n          <Layout style={{ padding: \"0 24px 24px\" }}>\n            <Breadcrumb style={{ margin: \"16px 0\" }}>\n              <Breadcrumb.Item>{this.state.Breadcrumb1}</Breadcrumb.Item>\n              <Breadcrumb.Item>{this.state.Breadcrumb2}</Breadcrumb.Item>\n              <Breadcrumb.Item>{this.state.Breadcrumb3}</Breadcrumb.Item>\n            </Breadcrumb>\n            <Content\n              style={{\n                background: \"#fff\",\n                padding: 24,\n                margin: 0,\n                minHeight: 780\n              }}\n            >\n              Content\n            </Content>\n          </Layout>\n        </Layout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}